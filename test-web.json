{
	"info": {
		"_postman_id": "7a50ba2f-846b-4dc6-aa81-64fec57fd039",
		"name": "test-web",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"description": null,
			"item": [
				{
					"name": "GET: Index - not login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "394266dd-e1fc-41a1-83c3-2c8304ddd06e",
								"type": "text/javascript",
								"exec": [
									"tests['response contains Hello world :D'] = _.include(responseBody, 'Hello world :D');"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4df93261-3e18-4506-8d47-9a50d223614b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								""
							]
						},
						"description": "Login API"
					},
					"response": []
				},
				{
					"name": "GET: cck API users - not login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "32eb0c60-c8a2-431e-8a8b-016238898463",
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"",
									"tests['should be forbidden'] = responseJSON.status === 401;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4df93261-3e18-4506-8d47-9a50d223614b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users"
							]
						},
						"description": "Login API"
					},
					"response": []
				},
				{
					"name": "GET: Login API - correct",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5710ba44-58af-4c79-b344-1d09ccd5053d",
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"console.log(responseJSON);",
									"tests['response contains `token`'] = _.has(responseJSON, 'token');",
									"tests['response contains `userMessage`'] = _.has(responseJSON, 'userMessage');",
									"tests['response contains `status`'] = _.has(responseJSON, 'status');",
									"",
									"tests['response status is 200'] = responseJSON.status == 200;",
									"",
									"tests['same token should be available in cookies'] = postman.getResponseCookie('token').value == responseJSON.token;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/login-api?user=admin&password=admin",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"login-api"
							],
							"query": [
								{
									"key": "user",
									"value": "admin"
								},
								{
									"key": "password",
									"value": "admin"
								}
							]
						},
						"description": "Login API"
					},
					"response": []
				},
				{
					"name": "GET: cck API users - login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "43c46d61-7ffa-46e5-8a3f-5ea3ffac94b5",
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"",
									"tests['should be ok'] = responseJSON.status === 200;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4df93261-3e18-4506-8d47-9a50d223614b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users"
							]
						},
						"description": "Login API"
					},
					"response": []
				},
				{
					"name": "GET: Index - login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ea96c9a-74a7-4ce0-b722-43d628591c44",
								"type": "text/javascript",
								"exec": [
									"tests['response contains Hello world :D'] = _.include(responseBody, 'Hello admin');"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								""
							]
						},
						"description": "Login API"
					},
					"response": []
				},
				{
					"name": "GET: Login API - incorrect user, correct password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d788216c-e57b-4caa-b6e9-c20fd73f2c05",
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"console.log(responseJSON);",
									"tests['response contains `token`'] = _.has(responseJSON, 'token');",
									"tests['response contains `userMessage`'] = _.has(responseJSON, 'userMessage');",
									"tests['response contains `status`'] = _.has(responseJSON, 'status');",
									"",
									"tests['response status is 400'] = responseJSON.status == 400;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/login-api?user=root&password=admin",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"login-api"
							],
							"query": [
								{
									"key": "user",
									"value": "root"
								},
								{
									"key": "password",
									"value": "admin"
								}
							]
						},
						"description": "Login API"
					},
					"response": []
				},
				{
					"name": "GET: Login API - correct user, incorrect password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4b7581a3-8b19-4f6e-8cef-b1317ae100b6",
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"console.log(responseJSON);",
									"tests['response contains `token`'] = _.has(responseJSON, 'token');",
									"tests['response contains `userMessage`'] = _.has(responseJSON, 'userMessage');",
									"tests['response contains `status`'] = _.has(responseJSON, 'status');",
									"",
									"tests['response status is 400'] = responseJSON.status == 400;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/login-api?user=admin&password=root",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"login-api"
							],
							"query": [
								{
									"key": "user",
									"value": "admin"
								},
								{
									"key": "password",
									"value": "root"
								}
							]
						},
						"description": "Login API"
					},
					"response": []
				},
				{
					"name": "GET: Logout API",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2e925635-56a0-4ad7-860d-763b04f82bad",
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"console.log(responseJSON);",
									"tests['response contains `token`'] = _.has(responseJSON, 'token');",
									"tests['response contains `status`'] = _.has(responseJSON, 'status');",
									"",
									"tests['response status is 200'] = responseJSON.status == 200;",
									"",
									"tests['same token should be available in cookies'] = postman.getResponseCookie('token').value == responseJSON.token;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/logout-api",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"logout-api"
							]
						},
						"description": "Login API"
					},
					"response": []
				},
				{
					"name": "GET: Index - not login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "394266dd-e1fc-41a1-83c3-2c8304ddd06e",
								"type": "text/javascript",
								"exec": [
									"tests['response contains Hello world :D'] = _.include(responseBody, 'Hello world :D');"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								""
							]
						},
						"description": "Login API"
					},
					"response": []
				},
				{
					"name": "POST: Login API - correct",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28d753f1-eae4-4838-b7de-230f6f3ad814",
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"console.log(responseJSON);",
									"tests['response contains `token`'] = _.has(responseJSON, 'token');",
									"tests['response contains `userMessage`'] = _.has(responseJSON, 'userMessage');",
									"tests['response contains `status`'] = _.has(responseJSON, 'status');",
									"",
									"tests['response status is 200'] = responseJSON.status == 200;",
									"",
									"tests['same token should be available in cookies'] = postman.getResponseCookie('token').value == responseJSON.token;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "user",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/login-api",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"login-api"
							]
						},
						"description": "Login API"
					},
					"response": []
				},
				{
					"name": "GET: Index - login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ea96c9a-74a7-4ce0-b722-43d628591c44",
								"type": "text/javascript",
								"exec": [
									"tests['response contains Hello world :D'] = _.include(responseBody, 'Hello admin');"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								""
							]
						},
						"description": "Login API"
					},
					"response": []
				},
				{
					"name": "GET: cck cck with fieldInfo",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7f7ba7eb-a034-4539-a89c-e94dff070b59",
								"type": "text/javascript",
								"exec": [
									"var responseJSON, results, firstResult, fieldInfo;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"console.log(responseJSON);",
									"tests['response contains `results`'] = _.has(responseJSON, 'results');",
									"fieldInfo = responseJSON.metadata.fieldInfo;",
									"resultset = responseJSON.metadata.resultset;",
									"results = responseJSON.results;",
									"firstResult = results[0];",
									"tests['group options should be more than 2'] = Object.keys(fieldInfo.groups.options).length > 2",
									"tests['offset should be 0'] = resultset.offset === 0;",
									"tests['results contains 3 rows'] = results.length === 1;",
									"tests['firstResult has id'] = ('_id' in firstResult);",
									"tests['firstResult does not have history'] = !('_history' in firstResult);",
									"",
									"postman.setEnvironmentVariable('firstTestId', firstResult._id);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/routes?includeFieldInfo=1&limit=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"routes"
							],
							"query": [
								{
									"key": "includeFieldInfo",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "1"
								}
							]
						},
						"description": "Login API"
					},
					"response": []
				},
				{
					"name": "GET: Logout API",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9229f4c9-18fb-4284-83f8-7258e9b4ab03",
								"type": "text/javascript",
								"exec": [
									"var responseJSON;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"",
									"tests['response contains `token`'] = _.has(responseJSON, 'token');",
									"tests['response contains `status`'] = _.has(responseJSON, 'status');",
									"",
									"tests['response status is 200'] = responseJSON.status == 200;",
									"",
									"tests['same token should be available in cookies'] = postman.getResponseCookie('token').value == responseJSON.token;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/logout-api",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"logout-api"
							]
						},
						"description": "Login API"
					},
					"response": []
				},
				{
					"name": "GET: Index - not login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8a8da394-2d0a-40f2-b900-59e046b05067",
								"type": "text/javascript",
								"exec": [
									"tests['response contains Hello world :D'] = _.include(responseBody, 'Hello world :D');"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								""
							]
						},
						"description": "Login API"
					},
					"response": []
				}
			]
		},
		{
			"name": "CCK API: POST",
			"description": null,
			"item": [
				{
					"name": "POST: cck tests - insert testKey1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "57783a14-5e23-4149-aff9-27397f2dd4bc",
								"type": "text/javascript",
								"exec": [
									"var responseJSON, result;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"console.log(responseJSON);",
									"result = responseJSON.result;",
									"",
									"tests['inserted key correct'] = result.key == 'testKey1';",
									"tests['inserted value correct'] = result.value == 'testValue1';",
									"postman.setEnvironmentVariable('firstTestId', result._id);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "key",
									"value": "testKey1",
									"type": "text"
								},
								{
									"key": "value",
									"value": "testValue1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/tests",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"tests"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST: cck tests - insert-bulk testKey2 & testKey3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8c41e5b4-a684-4fbc-b474-dca9a721bdf2",
								"type": "text/javascript",
								"exec": [
									"var responseJSON, results;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"console.log(responseJSON);",
									"results = responseJSON.results;",
									"tests['results should contains two documents'] = results.length == 2;",
									"tests['first result should be testKey2'] = results[0].key == 'testKey2';",
									"tests['second result should be testKey3'] = results[1].key == 'testKey3';"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json;charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{\"key\":\"testKey2\",\"value\":\"testValue2\"}, {\"key\":\"testKey3\",\"value\":\"testValue3\"}]"
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/tests",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"tests"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET: cck tests - all",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "abdf31e7-70ed-4d4b-a334-83e906478bc2",
								"type": "text/javascript",
								"exec": [
									"var responseJSON, results, firstResult;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"console.log(responseJSON);",
									"tests['response contains `results`'] = _.has(responseJSON, 'results');",
									"results = responseJSON.results;",
									"firstResult = results[0];",
									"tests['results contains 3 rows'] = results.length === 3;",
									"tests['firstResult has id'] = ('_id' in firstResult);",
									"tests['firstResult does not have history'] = !('_history' in firstResult);",
									"",
									"postman.setEnvironmentVariable('firstTestId', firstResult._id);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/tests",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"tests"
							]
						},
						"description": "Login API"
					},
					"response": []
				}
			]
		},
		{
			"name": "CCK API: GET",
			"description": null,
			"item": [
				{
					"name": "GET: cck tests - all",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1fc6180-85cb-4ae6-b5bf-27bd5eff9dea",
								"type": "text/javascript",
								"exec": [
									"var responseJSON, results, firstResult;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"console.log(responseJSON);",
									"tests['response contains `results`'] = _.has(responseJSON, 'results');",
									"resultset = responseJSON.metadata.resultset;",
									"results = responseJSON.results;",
									"firstResult = results[0];",
									"tests['count should be 3'] = resultset.count === 3;",
									"tests['offset should be 0'] = resultset.offset === 0;",
									"tests['results contains 3 rows'] = results.length === 3;",
									"tests['firstResult has id'] = ('_id' in firstResult);",
									"tests['firstResult does not have history'] = !('_history' in firstResult);",
									"",
									"postman.setEnvironmentVariable('firstTestId', firstResult._id);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/tests",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"tests"
							]
						},
						"description": "Login API"
					},
					"response": []
				},
				{
					"name": "GET: cck tests - limit offset and showHistory",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b1eb1ca-847d-4319-840b-38bff04c90f8",
								"type": "text/javascript",
								"exec": [
									"var responseJSON, results, firstResult;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"console.log(responseJSON);",
									"tests['response contains `results`'] = _.has(responseJSON, 'results');",
									"results = responseJSON.results;",
									"resultset = responseJSON.metadata.resultset;",
									"firstResult = results[0];",
									"tests['count should be 3'] = resultset.count === 3;",
									"tests['limit should be 2'] = resultset.limit === 2;",
									"tests['offset should be 1'] = resultset.offset === 1;",
									"tests['results contains 3 fields'] = results.length === 2;",
									"tests['firstResult has id'] = ('_id' in firstResult);",
									"tests['firstResult key should be testKey2'] = firstResult.key === 'testKey2';",
									"tests['firstResult has history'] = ('_history' in firstResult);",
									"tests['firstResult history is correct'] = firstResult._history[0].key = firstResult.key;",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/tests?limit=2&offset=1&showHistory=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"tests"
							],
							"query": [
								{
									"key": "limit",
									"value": "2"
								},
								{
									"key": "offset",
									"value": "1"
								},
								{
									"key": "showHistory",
									"value": "1"
								}
							]
						},
						"description": "Login API"
					},
					"response": []
				},
				{
					"name": "GET: cck tests - field projection and filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "801905f4-6e8f-4f01-9957-07101bd6c43f",
								"type": "text/javascript",
								"exec": [
									"var responseJSON, results, firstResult;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"console.log(responseJSON);",
									"tests['response contains `results`'] = _.has(responseJSON, 'results');",
									"results = responseJSON.results;",
									"firstResult = results[0];",
									"tests['results contains 1 row'] = results.length === 1;",
									"tests['first result value is testValue 2'] = firstResult.value === 'testValue2'",
									"tests['firstResult has id'] = ('_id' in firstResult);",
									"tests['firstResult has no history'] = !('_history' in firstResult);",
									"tests['firstResult has no key'] = !('key' in firstResult);",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/tests?fields=_id,value&key=testKey2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"tests"
							],
							"query": [
								{
									"key": "fields",
									"value": "_id,value"
								},
								{
									"key": "key",
									"value": "testKey2"
								}
							]
						},
						"description": "Login API"
					},
					"response": []
				},
				{
					"name": "GET: cck tests - by k",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e12db54c-8b76-4857-ae54-3476f6744f7c",
								"type": "text/javascript",
								"exec": [
									"var responseJSON, result;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"console.log(responseJSON);",
									"tests['response contains `results`'] = _.has(responseJSON, 'results');",
									"firstResult = responseJSON.results[0];",
									"tests['firstResult key should be `testKey3`'] = firstResult.key === 'testKey3'"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/tests?k=ue3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"tests"
							],
							"query": [
								{
									"key": "k",
									"value": "ue3"
								}
							]
						},
						"description": "Login API"
					},
					"response": []
				},
				{
					"name": "GET: cck tests - by q",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8702b8b2-10f0-47cd-a2a9-435b77394a69",
								"type": "text/javascript",
								"exec": [
									"var responseJSON, result;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"console.log(responseJSON);",
									"tests['response contains `results`'] = _.has(responseJSON, 'results');",
									"firstResult = responseJSON.results[0];",
									"secondResult = responseJSON.results[1];",
									"tests['firstResult key should be `testKey1`'] = firstResult.key === 'testKey1';",
									"tests['secondResult key should be `testKey3`'] = secondResult.key === 'testKey3';"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/tests?q={\"$or\":[{\"key\":\"testKey1\"},{\"key\":\"testKey3\"}]}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"tests"
							],
							"query": [
								{
									"key": "q",
									"value": "{\"$or\":[{\"key\":\"testKey1\"},{\"key\":\"testKey3\"}]}"
								}
							]
						},
						"description": "Login API"
					},
					"response": []
				},
				{
					"name": "GET: cck tests - by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "805bb290-ac57-4ea0-ba4f-29d4e03b44c3",
								"type": "text/javascript",
								"exec": [
									"var responseJSON, result;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"console.log(responseJSON);",
									"tests['response contains `result`'] = _.has(responseJSON, 'result');",
									"result = responseJSON.result;",
									"tests['result has id'] = ('_id' in result);",
									"tests['result id is valid'] = result._id == postman.getEnvironmentVariable('firstTestId');"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/tests/{{firstTestId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"tests",
								"{{firstTestId}}"
							]
						},
						"description": "Login API"
					},
					"response": []
				},
				{
					"name": "GET: cck tests - by id (incorrect)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a4393f88-3d90-4d9c-ba66-5be67e8fca69",
								"type": "text/javascript",
								"exec": [
									"var responseJSON, result;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"console.log(responseJSON);",
									"tests['response contains `status`'] = _.has(responseJSON, 'status');",
									"tests['response contains `result`'] = _.has(responseJSON, 'result');",
									"result = responseJSON.result;",
									"",
									"tests['response status is 400'] = responseJSON.status == 400;",
									"tests['result has no id'] = !('_id' in result);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/tests/123",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"tests",
								"123"
							]
						},
						"description": "Login API"
					},
					"response": []
				}
			]
		},
		{
			"name": "CCK API: UPDATE",
			"description": null,
			"item": [
				{
					"name": "POST: cck tests - update all",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa4f971a-8c0a-4031-a730-a3381c52771e",
								"type": "text/javascript",
								"exec": [
									"var responseJSON, result;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"console.log(responseJSON);",
									"result = responseJSON.result;",
									"tests['result.nModified should be 3'] = result.nModified == 3;"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "value",
									"value": "foo",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/tests",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"tests"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST: cck tests - update one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "21779103-d686-471f-b33b-d180a0882bde",
								"type": "text/javascript",
								"exec": [
									"var responseJSON, result;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"console.log(responseJSON);",
									"result = responseJSON.result;",
									"tests['result.nModified should be 1'] = result.nModified == 1;"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "value",
									"value": "bar",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/tests/{{firstTestId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"tests",
								"{{firstTestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET: cck tests - all",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "76dbce8c-9638-4e1f-b0da-998625d13bf2",
								"type": "text/javascript",
								"exec": [
									"var responseJSON, results, fooCount, barCount;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"console.log(responseJSON);",
									"tests['response contains `results`'] = _.has(responseJSON, 'results');",
									"results = responseJSON.results;",
									"",
									"fooCount = 0;",
									"barCount = 0;",
									"for (let result of results) {",
									"    if (result.value == 'foo') {",
									"        fooCount ++;",
									"    } else if (result.value == 'bar') {",
									"        barCount ++;",
									"    }",
									"}",
									"",
									"tests['fooCount is 2'] = fooCount == 2;",
									"tests['barCount is 1'] = barCount == 1;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/tests",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"tests"
							]
						},
						"description": "Login API"
					},
					"response": []
				}
			]
		},
		{
			"name": "CCK API: DELETE",
			"description": null,
			"item": [
				{
					"name": "POST: cck tests - delete one (soft)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3430ca51-5912-4acd-b288-7a562d268869",
								"type": "text/javascript",
								"exec": [
									"var responseJSON, result;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"console.log(responseJSON);",
									"result = responseJSON.result;",
									"tests['result.nModified should be 1'] = result.nModified == 1;"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/tests/{{firstTestId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"tests",
								"{{firstTestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST: cck tests - delete all (soft)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3dbbdd90-b608-4058-82d8-b57de1e7b7b2",
								"type": "text/javascript",
								"exec": [
									"var responseJSON, result;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"console.log(responseJSON);",
									"result = responseJSON.result;",
									"tests['result.nModified should be 2'] = result.nModified == 2;"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/tests",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"tests"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET: cck tests - all (excludeDeleted)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "22a783c0-d852-4390-8ab7-9f02f6900ee8",
								"type": "text/javascript",
								"exec": [
									"var responseJSON, results;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"console.log(responseJSON);",
									"tests['response contains `results`'] = _.has(responseJSON, 'results');",
									"results = responseJSON.results;",
									"",
									"tests['results should be empty'] = results.length === 0;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/tests",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"tests"
							]
						},
						"description": "Login API"
					},
					"response": []
				},
				{
					"name": "GET: cck tests - all (includeDeleted)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ec73f01-c95e-442b-a5ca-82f227310604",
								"type": "text/javascript",
								"exec": [
									"var responseJSON, results;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"console.log(responseJSON);",
									"tests['response contains `results`'] = _.has(responseJSON, 'results');",
									"results = responseJSON.results;",
									"",
									"tests['results should be 3'] = results.length === 3;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/tests?excludeDeleted=0",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"tests"
							],
							"query": [
								{
									"key": "excludeDeleted",
									"value": "0"
								}
							]
						},
						"description": "Login API"
					},
					"response": []
				},
				{
					"name": "POST: cck tests - delete all (hard)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f207e73-f13b-4a41-baa3-1c40c5c24c49",
								"type": "text/javascript",
								"exec": [
									"var responseJSON, result;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"console.log(responseJSON);",
									"result = responseJSON.result;",
									"tests['result.n should be 3'] = result.n == 3;"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/tests?excludeDeleted=0",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"tests"
							],
							"query": [
								{
									"key": "excludeDeleted",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET: cck tests - all (includeDeleted)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2acb588e-eae6-4d03-8654-eb750438a2ca",
								"type": "text/javascript",
								"exec": [
									"var responseJSON, results;",
									"",
									"try { ",
									"    responseJSON = JSON.parse(responseBody); ",
									"    tests['response is valid JSON'] = true;",
									"}",
									"catch (e) { ",
									"    responseJSON = {}; ",
									"    tests['response is valid JSON'] = false;",
									"}",
									"console.log(responseJSON);",
									"tests['response contains `results`'] = _.has(responseJSON, 'results');",
									"results = responseJSON.results;",
									"",
									"tests['results should be empty'] = results.length === 0;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/tests?excludeDeleted=0",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"tests"
							],
							"query": [
								{
									"key": "excludeDeleted",
									"value": "0"
								}
							]
						},
						"description": "Login API"
					},
					"response": []
				}
			]
		}
	]
}