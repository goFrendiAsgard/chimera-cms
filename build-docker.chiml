verbose: 2
do:

  # get configuration from webConfig
  - |{$.loadJs(_chain_cwd + 'helper.js', 'getWebConfig')} -> webConfig

  # get mongoUrl
  - |(webConfig.mongoUrl) --> mongoUrl

  # get dbName
  - |(mongoUrl, '/') -> {$.split} -> mongoUrlPart
  - |(mongoUrlPart[mongoUrlPart.length - 1]) --> dbName

  # get ymlObj from docker-compose.yml
  - |(_chain_cwd + 'docker-compose.yml', 'utf8') -> [$.loadJs('fs', 'readFile')] -> ymlContent
  - |(ymlContent) -> {$.loadJs('js-yaml', 'safeLoad')} -> ymlObj

  # get mongoPort
  - |(ymlObj.services.mongo.ports[0], ':') -> {$.split} -> mongoPortPart
  - |(mongoPortPart[1]) --> mongoPort
  - |(mongoPort) -> {$.print}

  # get webPort
  - |(ymlObj.services.web.ports[0], ':') -> {$.split} -> webPortPart
  - |(webPortPart[1]) --> webPort
  - |(webPort) -> {$.print}

  # create webConfig.json
  - |('-p', _chain_cwd + 'dockerDump') -> mkdir
  - |({port: webPort, mongoUrl: 'mongodb://localhost:' + mongoPort + '/' + dbName}) --> webConfig
  - |(_chain_cwd + 'dockerDump/webConfig.json', webConfig) -> [$.util.writePrettyJsonFile]

  # build docker image
  - |docker build -t chimera-cms .

  # docker compose up
  - |docker-compose up

  # dump dbName
  # - |('-d', dbName, '-o', 'dockerDump') -> mongodump

  # build docker image
  #- |('--build-arg', 'dbName=' + dbName, '-f', 'dockerfile', '-t', 'cms-docker', _chain_cwd) -> docker build